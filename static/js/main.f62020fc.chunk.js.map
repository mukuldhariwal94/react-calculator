{"version":3,"sources":["logo.svg","Button.jsx","ButtonHolder.jsx","OperatorHolder.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","react_default","a","createElement","className","onClick","undefined","updateButton","label","evaluate","style","padding","margin","border","ButtonHolder","buttonLabel","console","log","updateButtonsPressed","src_Button","OperatorHolder","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentLabel","result","bind","assertThisInitialized","updatedLabel","setState","total","s","match","length","parseFloat","shift","src_ButtonHolder","src_OperatorHolder","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f62020fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst Button = (props) => {\r\n    const ButtonStyle = {\r\n        padding: '40px',\r\n        margin: '10px',\r\n        border: 'black'\r\n    }\r\n    const onClick = () => {\r\n        if (props.updateButton != undefined)\r\n            props.updateButton(props.label);\r\n        else\r\n            props.evaluate();\r\n    }\r\n\r\n    return (\r\n        <button className=\"btn-primary\" onClick={onClick} style={ButtonStyle} > {props.label} </button>\r\n    );\r\n};\r\n\r\nexport default Button; ","import React from 'react';\r\nimport Button from './Button'; \r\n\r\nconst ButtonHolder = (props) => {\r\n    \r\n    const updateButton = (buttonLabel) => \r\n    {\r\n        console.log(buttonLabel);\r\n        props.updateButtonsPressed(buttonLabel); \r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <p>\r\n            <Button label=\"1\" updateButton={updateButton} />\r\n            <Button label=\"2\" updateButton={updateButton} />\r\n            <Button label=\"3\" updateButton={updateButton} />\r\n            </p>\r\n            <p>\r\n            <Button label=\"4\" updateButton={updateButton} />\r\n            <Button label=\"5\" updateButton={updateButton} />\r\n            <Button label=\"6\" updateButton={updateButton} />\r\n            </p>\r\n            <p>\r\n            <Button label=\"7\" updateButton={updateButton} />\r\n            <Button label=\"8\" updateButton={updateButton} />\r\n            <Button label=\"9\" updateButton={updateButton} />\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ButtonHolder; ","import React from 'react'; \r\nimport Button from './Button'; \r\n\r\nconst OperatorHolder = (props) => \r\n{\r\n    const updateButton = (buttonLabel) => \r\n    {\r\n        console.log(buttonLabel);\r\n        props.updateButtonsPressed(buttonLabel); \r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Button label=\"+\" updateButton={updateButton} />\r\n            <Button label=\"-\" updateButton={updateButton} />\r\n            <Button label=\"AC\" updateButton={updateButton} />\r\n        </div>\r\n    );\r\n}; \r\nexport default OperatorHolder;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ButtonHolder from './ButtonHolder';\nimport OperatorHolder from './OperatorHolder';\nimport Button from './Button';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { currentLabel: \"\", result: \"\" };\n    this.updateButtonsPressed = this.updateButtonsPressed.bind(this);\n    this.evaluate = this.evaluate.bind(this);\n  }\n\n  updateButtonsPressed(buttonLabel) {\n    if(buttonLabel == 'AC')\n    { \n      this.setState({currentLabel : \"\", result : \"\"});\n      return;\n    }\n    var currentLabel = this.state.currentLabel;\n    var updatedLabel = currentLabel + buttonLabel;\n    console.log(updatedLabel);\n\n    this.setState({ currentLabel: updatedLabel })\n  }\n\n  evaluate() {\n    var s = this.state.currentLabel;\n    var total = 0, s = s.match(/[+\\-]*(\\.\\d+|\\d+(\\.\\d+)?)/g) || [];\n    while (s.length) {\n      total += parseFloat(s.shift());\n    }\n\n    this.setState({ currentLabel: total });\n  }\n\n  render() {\n    const style = { \n      padding : '40px'\n    }\n    return (\n      <div className=\"App\">\n        <ButtonHolder updateButtonsPressed={this.updateButtonsPressed} />\n        <OperatorHolder updateButtonsPressed={this.updateButtonsPressed} />\n        <Button evaluate={this.evaluate} label = \"=\" > = </Button>\n        <div className = \"label-primary\"><h1> {this.state.currentLabel} </h1></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}